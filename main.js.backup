// Ask for a user name until API returns a valid user
async function getUser() {
	let user
	while (true) {
		let name = prompt('Enter a user name', 'rubjo')
		try {
			user = await loadJson(`https://my.api.com/users/${name}`)
			break // No error, exit loop and proceed
		} catch (err) {
			if (err.response && err.response.status === 404) {
				alert(`User "${name}" not found, please reenter.`)
			} else {
				throw err // Unknown error, rethrow it
			}
		}
	}
	return user
}

// Modules to control application life and create native browser window
const {
  app,
  BrowserWindow,
  ipcMain,
  dialog
} = require("electron");
const path = require('path');
const fs = require("fs");
const Store = require('electron-store');

const pjson = require('./package.json');


const store = new Store();

var filePath = store.get("filePath");

let mainWindow;

function createWindow () {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1000,
    height: 800,
	minWidth: 500,
	minHeight: 600,
	darkTheme: true,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })

  // and load the index.html of the app.
  mainWindow.loadFile('index.html')
  mainWindow.removeMenu();

  mainWindow.webContents.on('new-window', function(e, url) {
	e.preventDefault();
	require('electron').shell.openExternal(url);
  });
  
  // Open the DevTools.
  mainWindow.webContents.openDevTools()
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow()

  app.on('activate', function () {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', function () {
	if (process.platform !== 'darwin') app.quit()
});



ipcMain.on("init", (event, args) => {
	if (filePath) mainWindow.webContents.send("setFile", filePath);

	mainWindow.webContents.send("setMetadata", [pjson.version, pjson.author, pjson.description]);
});


var defaultWatsonPath = app.getPath("appData") + '\\watson'; 

ipcMain.on("openFileDialog", (event, args) => {
	dialog.showOpenDialog(mainWindow, {
		title: 'Load Watson frames file',
		defaultPath: defaultWatsonPath,
		properties: ['openFile', 'showHiddenFiles']
	}).then(result => {
		if (!result.canceled)
		{
			store.set('filePath', result.filePaths[0]);
			mainWindow.webContents.send("setFile", result.filePaths[0]);
		}
	  }).catch(err => {
		console.log(err)
	  });
});

ipcMain.on("print", (event, args) => {
	mainWindow.webContents.print({silent:false, printBackground:false})
});

ipcMain.on("readFrames", (event, args) => {

	fs.readFile(filePath, 'utf8', (error, data) => {

    if (error != null) {
		console.log(error);
    }
    else
    {
      mainWindow.webContents.send("loadFrames", data);
    }
    
  });
});